# automatically generated by the FlatBuffers compiler, do not modify

# namespace: OptionData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OptionChain(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OptionChain()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOptionChain(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OptionChain
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OptionChain
    def Expiration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OptionChain
    def SpotPrice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # OptionChain
    def TauYears(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # OptionChain
    def Rfr(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OptionChain
    def RfrAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # OptionChain
    def RfrLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OptionChain
    def RfrIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # OptionChain
    def CallsStrike(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OptionChain
    def CallsStrikeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # OptionChain
    def CallsStrikeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OptionChain
    def CallsStrikeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # OptionChain
    def CallsBid(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OptionChain
    def CallsBidAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # OptionChain
    def CallsBidLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OptionChain
    def CallsBidIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # OptionChain
    def CallsAsk(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OptionChain
    def CallsAskAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # OptionChain
    def CallsAskLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OptionChain
    def CallsAskIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # OptionChain
    def PutsStrike(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OptionChain
    def PutsStrikeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # OptionChain
    def PutsStrikeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OptionChain
    def PutsStrikeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # OptionChain
    def PutsBid(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OptionChain
    def PutsBidAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # OptionChain
    def PutsBidLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OptionChain
    def PutsBidIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # OptionChain
    def PutsAsk(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OptionChain
    def PutsAskAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # OptionChain
    def PutsAskLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OptionChain
    def PutsAskIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def OptionChainStart(builder):
    builder.StartObject(10)

def Start(builder):
    OptionChainStart(builder)

def OptionChainAddExpiration(builder, expiration):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(expiration), 0)

def AddExpiration(builder, expiration):
    OptionChainAddExpiration(builder, expiration)

def OptionChainAddSpotPrice(builder, spotPrice):
    builder.PrependFloat32Slot(1, spotPrice, 0.0)

def AddSpotPrice(builder, spotPrice):
    OptionChainAddSpotPrice(builder, spotPrice)

def OptionChainAddTauYears(builder, tauYears):
    builder.PrependFloat32Slot(2, tauYears, 0.0)

def AddTauYears(builder, tauYears):
    OptionChainAddTauYears(builder, tauYears)

def OptionChainAddRfr(builder, rfr):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rfr), 0)

def AddRfr(builder, rfr):
    OptionChainAddRfr(builder, rfr)

def OptionChainStartRfrVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRfrVector(builder, numElems):
    return OptionChainStartRfrVector(builder, numElems)

def OptionChainAddCallsStrike(builder, callsStrike):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(callsStrike), 0)

def AddCallsStrike(builder, callsStrike):
    OptionChainAddCallsStrike(builder, callsStrike)

def OptionChainStartCallsStrikeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCallsStrikeVector(builder, numElems):
    return OptionChainStartCallsStrikeVector(builder, numElems)

def OptionChainAddCallsBid(builder, callsBid):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(callsBid), 0)

def AddCallsBid(builder, callsBid):
    OptionChainAddCallsBid(builder, callsBid)

def OptionChainStartCallsBidVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCallsBidVector(builder, numElems):
    return OptionChainStartCallsBidVector(builder, numElems)

def OptionChainAddCallsAsk(builder, callsAsk):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(callsAsk), 0)

def AddCallsAsk(builder, callsAsk):
    OptionChainAddCallsAsk(builder, callsAsk)

def OptionChainStartCallsAskVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCallsAskVector(builder, numElems):
    return OptionChainStartCallsAskVector(builder, numElems)

def OptionChainAddPutsStrike(builder, putsStrike):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(putsStrike), 0)

def AddPutsStrike(builder, putsStrike):
    OptionChainAddPutsStrike(builder, putsStrike)

def OptionChainStartPutsStrikeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPutsStrikeVector(builder, numElems):
    return OptionChainStartPutsStrikeVector(builder, numElems)

def OptionChainAddPutsBid(builder, putsBid):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(putsBid), 0)

def AddPutsBid(builder, putsBid):
    OptionChainAddPutsBid(builder, putsBid)

def OptionChainStartPutsBidVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPutsBidVector(builder, numElems):
    return OptionChainStartPutsBidVector(builder, numElems)

def OptionChainAddPutsAsk(builder, putsAsk):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(putsAsk), 0)

def AddPutsAsk(builder, putsAsk):
    OptionChainAddPutsAsk(builder, putsAsk)

def OptionChainStartPutsAskVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPutsAskVector(builder, numElems):
    return OptionChainStartPutsAskVector(builder, numElems)

def OptionChainEnd(builder):
    return builder.EndObject()

def End(builder):
    return OptionChainEnd(builder)
